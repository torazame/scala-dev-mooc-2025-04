package ru.otus.homeworks

import scala.util.Random

/*
Домашнее задание
Коллекции данных

Цель:
Научиться практическому использованию наиболее употребляемых методов работы с данными и немного вспомнить математику
(теорию вероятности), ввиду того, что скалу очень часто применяют для анализа данных, то это будет полезно.


Описание/Пошаговая инструкция выполнения домашнего задания:
Необходимо будет "проверить" формулу вероятности

Если кратко:
В урне 3 белых и 3 черных шара. Из урны дважды вынимают по одному шару, не возвращая их обратно.
Найти вероятность появления белого шара.

Как будем делать:

1. создать класс с моделированием эксперимента, в нем должна быть коллекция (List) моделирующая урну с шариками
  (1 - белый шарик, 0 - черный шарик) и функция случайного выбора 2х шариков без возвращения (scala.util.Random),
    возвращать эта функция должна true (если был выбран белый шар) и false (в противном случае)
2. создать коллекцию объектов этих классов, скажем 10000 элементов, и провести этот эксперимент (функция map)
3. посчитать количество элементов массива из пункта 2 где функция вернула true, это количество поделенное на общее
  количество элементов массива
PS: чем больше будет количество опытов в пункте 2, тем ближе будет результат моделирования к аналитическому решению

 */

object collections_1 {

  /**
   * Функция, возвращающая коллекцию после удаления одного
   * элемента на заданной позиции. Требуется для расчета условной
   * вероятности.
   *
   * @param list Исходная коллекция с элементами
   * @param index Индекс элемента, который выбран из коллекции и удален
   * */
  def popElement[T](list: List[T], index: Int): List[T] = {
    val splitList = list.splitAt(index)
    splitList._1 ::: splitList._2.tail
  }

  /**
   * Функция для последовательно извлечения двух элементов из коллекции
   * без возвращения. Имитирует результат "элемент 1 выбран либо в первом,
   * либо во втором испытании без возвращения".
   *
   * @param ballsCollection Коллекция элементов двух видов (1 и 0)
   * @return true, если элемент 1 выбран либо в первом, либо во втором испытании.
   *         Иначе false.
   */
  def extractBall(ballsCollection: List[Int]): Boolean = {
    val firstIndex = Random.nextInt(ballsCollection.length)
    val ballIsWhiteFirstTry = ballsCollection(firstIndex) == 1

    val leftOverBallsCollection = popElement[Int](ballsCollection, firstIndex)
    val secondIndex = Random.nextInt(leftOverBallsCollection.length)
    val ballIsWhiteSecondTry = leftOverBallsCollection(secondIndex) == 1

    ballIsWhiteFirstTry || ballIsWhiteSecondTry
  }

  /** Расчет частоты появления частоты появления искомого элемента
   * по итогам проведенных испытаний.
   *
   * @param list Список результатов испытаний.
   * @return Доля успешных испытаний из их общего числа.
   * */
  def calculateFreq(list: List[Boolean]): Double = {
    list.count(_ == true).toDouble / list.length.toDouble
  }
}
